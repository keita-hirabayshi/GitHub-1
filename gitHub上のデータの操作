Gitレポジトリの変更を記録する
git commit      
git commit-m    gitを立ち上げずに、メッセージ付きで変更できる
git commit-v    変更した中身を確認しながら変更できる(通常は変更したファイル名しか確認できない)

ターミナルでgit commitを実行後、atomが開くのでinitialと入力し保存、左上のatomタブからquitにてタブを閉じる

分かりやすいコミットメッセージ
簡単に書く時    一行に要点と理由を簡潔に
細かく書く時    一行目内容、二行目空白、三行目変更理由といった具合



現在の変更内容を確認する(git status)
コミットやステージに追加する前にどのファイルが変更されたかを確認する癖をつけておく
⇨ 変更したいファイルのみをステージに追加するようにした方が良い

git status  (ワークツリーとステージ・ステージとレポジトリ間の変更内容を表示する)
ワークツリーとステージ      ワークツリー上で変更されたファイル
ステージとレポジトリ        ステージ上に新たに追加されたファイル
→ ステージ上のインデックスを見るだけで、前回との変更箇所が一目でわかる

何を変更したのか差分を確認する(git diff)
ステージに追加したりコミットする前に、何を変更したいか確認してから変更するようにする
git addする前の変更分(ワークツリーとステージ間)
git diff    前回ステージに追加されたものと差分を比較
git addした後の変更分(ステージとレポジトリ間)
git diff --staged

変更履歴を確認する(git log)
新しいコミットから順に表示される
git log --oneline       一行で表示する
git log -p index.html   ファイルの変更差分を表示する
git log -n(コミット数)    表示するコミット数を制限する


ファイルの削除を記録する(git rm)

ファイルごと削除(ファイルそのものを削除したい場合)
git rm(ファイル名)
git rm -r(ディレクトリ名)

ファイルを残したい時(gitのレポジトリからのみ削除したい場合)
git rm --cached(ファイル名)


ファイルの移動を記録する(git mv)
git mv(旧ファイル名)(新ファイル名)  == mv(旧)(新) git rm(旧ファイル名)  git add(新ファイル名)
・ワークツリーからステージにファイルが追加された状態とする
・ワークツリーにてファイル名を変更する git mv

